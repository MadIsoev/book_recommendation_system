import streamlit as st
import pandas as pd
from difflib import SequenceMatcher
import plotly.express as px
from datetime import datetime
import seaborn as sns
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS

st.set_page_config(
    page_title="NextBook ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
    page_icon="üìö",
    layout="wide"
)

# –ù–æ–≤—ã–π —Å—Ç–∏–ª—å
style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Open+Sans:wght@400;600&display=swap');

        .main {
            padding: 2rem;
            font-family: 'Open Sans', sans-serif;
        }
        h1, h2, h3, h4, h5 {
            font-family: 'Roboto', sans-serif;
            color: #4A4A4A;
        }

        .stButton>button {
            width: 100%;
            background: linear-gradient(90deg, #6C63FF, #A084DC);
            color: white;
            border: none;
            padding: 0.6rem;
            border-radius: 0.5rem;
            font-weight: bold;
            transition: background 0.3s ease, transform 0.3s ease;
        }
        .stButton>button:hover {
            background: linear-gradient(90deg, #4C47E3, #6F5BB5);
            transform: scale(1.05);
            color: white;
        }
        .recommendation-card {
            padding: 1.5rem;
            border-radius: 1rem;
            background: linear-gradient(135deg, #F0F0F5, #D9D9E4);
            margin: 1rem 0;
            border-left: 5px solid #6C63FF;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            color: #333333;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .recommendation-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
        }
        .metric-card {
            background-color: #ffffff;
            padding: 1rem;
            border-radius: 0.8rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            color: black;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        </style>
    """, unsafe_allow_html=True)

class BookRecommender:
    def __init__(self, data):
        self.df = pd.DataFrame(data)
        self.df['title'] = self.df['title'].str.strip()
        self.df['authors'] = self.df['authors'].str.strip()
        self.df['clean_title'] = self.df['title'].str.replace(r'\(.*\)', '', regex=True).str.strip()
        self.df['publication_date'] = pd.to_datetime(self.df['publication_date'], errors='coerce')
        self.df = self.df.dropna(subset=['title', 'authors', 'average_rating'])

    def get_title_similarity(self, title1, title2):
        return SequenceMatcher(None, title1.lower(), title2.lower()).ratio()

    def get_author_similarity(self, author1, author2):
        authors1 = set(author1.lower().replace('/', ',').split(','))
        authors2 = set(author2.lower().replace('/', ',').split(','))
        intersection = len(authors1.intersection(authors2))
        union = len(authors1.union(authors2))
        return intersection / union if union > 0 else 0

    def recommend_books(self, query, by='title', n_recommendations=5):
        similarities = []
        if by == 'title':
            for idx, row in self.df.iterrows():
                similarity = self.get_title_similarity(query, row['clean_title'])
                if similarity < 1.0:
                    similarities.append(self._create_recommendation_dict(row, similarity))
        elif by == 'author':
            for idx, row in self.df.iterrows():
                similarity = self.get_author_similarity(query, row['authors'])
                similarities.append(self._create_recommendation_dict(row, similarity))

        return sorted(similarities, key=lambda x: (x['similarity'], x['average_rating']), reverse=True)[:n_recommendations]

    def _create_recommendation_dict(self, row, similarity):
        return {
            'bookID': row['bookID'],
            'title': row['title'],
            'authors': row['authors'],
            'similarity': similarity,
            'average_rating': row['average_rating'],
            'publication_date': row.get('publication_date', 'N/A'),
            'ratings_count': row.get('ratings_count', 0),
            'num_pages': row.get('num_pages', 'N/A')
        }


@st.cache_data
def load_data():
    try:
        data = pd.read_csv("books.csv", on_bad_lines='skip')
        data['title'] = data['title'].str.strip()
        data['authors'] = data['authors'].str.strip()
        data['publication_date'] = pd.to_datetime(data['publication_date'], errors='coerce')
        data = data.dropna(subset=['title', 'authors', 'average_rating'])
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()


def main():
    st.title("üìö NextBook ‚Äî –Ω–∞–π–¥–∏ —Å–≤–æ—é —Å–ª–µ–¥—É—é—â—É—é –ª—é–±–∏–º—É—é –∫–Ω–∏–≥—É")
    st.markdown("""
    **NextBook** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ üìñ
    - –ò–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üë©‚Äçüíº  
    """)
    st.markdown("#### –û—Ç–∫—Ä–æ–π –º–∏—Ä –Ω–æ–≤—ã—Ö –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥!")
    
    data = load_data()
    if data.empty:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª CSV.")
        return

    recommender = BookRecommender(data)

    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    search_type = st.sidebar.radio(
        "–ò—Å–∫–∞—Ç—å –ø–æ:",
        ["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", "–ê–≤—Ç–æ—Ä"]
    )

    if search_type == "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏":
        query = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", options=data['title'].unique())
        by = 'title'
    else:
        query = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:", options=data['authors'].unique())
        by = 'author'

    n_recommendations = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
        min_value=1,
        max_value=10,
        value=5
    )

    if st.sidebar.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        recommendations = recommender.recommend_books(query, by, n_recommendations)

        tab1, tab2 = st.tabs(["üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])

        with tab1:
            for i, book in enumerate(recommendations, 1):
                with st.container():
                    st.markdown(f"""
                    <div class="recommendation-card">
                        <h3>{i}. {book['title']}</h3>
                        <p><strong>–ê–≤—Ç–æ—Ä(—ã):</strong> {book['authors']}</p>
                        <p><strong>–ü–æ—Ö–æ–∂–µ—Å—Ç—å:</strong> {book['similarity']:.2f}</p>
                        <p><strong>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</strong> {book['publication_date'].date() if pd.notnull(book['publication_date']) else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                    </div>
                    """, unsafe_allow_html=True)

                    col1, col2, col3 = st.columns(3)

                    with col1:
                        st.markdown(f"""
                        <div class="metric-card">
                            <h4>–†–µ–π—Ç–∏–Ω–≥</h4>
                            <h2>‚≠ê {book['average_rating']:.2f}</h2>
                        </div>
                        """, unsafe_allow_html=True)

                    with col2:
                        st.markdown(f"""
                        <div class="metric-card">
                            <h4>–°—Ç—Ä–∞–Ω–∏—Ü</h4>
                            <h2>üìÑ {book['num_pages']}</h2>
                        </div>
                        """, unsafe_allow_html=True)

                    with col3:
                        st.markdown(f"""
                        <div class="metric-card">
                            <h4>–û—Ü–µ–Ω–æ–∫</h4>
                            <h2>üìä {book['ratings_count']:,}</h2>
                        </div>
                        """, unsafe_allow_html=True)

        with tab2: # –ì—Ä–∞—Ñ–∏–∫ –±–∞—Ä–æ–≤: —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
            fig_ratings = px.bar(
                pd.DataFrame(recommendations),
                x='title',
                y='average_rating',
                title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∫–Ω–∏–≥',
                labels={'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', 'average_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                color='average_rating',
                color_continuous_scale='purples'
            )
            fig_ratings.update_layout(showlegend=False)
            st.plotly_chart(fig_ratings, use_container_width=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
            st.markdown("### üìà –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥")
            
            # –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥
            book_counts = (
                data.groupby('title')['average_rating']
                .count()
                .sort_values(ascending=False)
            )
            popular_books = book_counts.reset_index()
            popular_books.columns = ['title', 'rating_count']
            
            top_10_books = popular_books.head(10)
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ matplotlib/seaborn
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='rating_count', y='title', data=top_10_books, palette='Set3', ax=ax)
            ax.set_xlabel('–†–µ–π—Ç–∏–Ω–≥', fontsize=12)
            ax.set_ylabel('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', fontsize=12)
            ax.set_title('–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É', fontsize=14)
            st.pyplot(fig)
            
            # –û–±–ª–∞–∫–æ —Å–ª–æ–≤ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            st.subheader("‚òÅÔ∏è –û–±–ª–∞–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥")
            book_string = " ".join((title + " ") * count for title, count in book_counts.items())
            
            custom_stopwords = set(STOPWORDS) - {"the", "a", "and", "in", "is", "of", "to"}
            
            wc = WordCloud(
                width=1000,
                height=600,
                max_font_size=120,
                stopwords=custom_stopwords,
                background_color='white'
            ).generate(book_string)
            
            fig_wc, ax_wc = plt.subplots(figsize=(16, 8))
            ax_wc.imshow(wc, interpolation='bilinear')
            ax_wc.axis('off')

            st.pyplot(fig_wc)

            st.markdown("---")
            
            st.subheader("üìö –¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤")
            
            # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ü–µ–Ω–æ–∫ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
            author_counts = (
                data.groupby('authors')['average_rating']
                .count()
                .sort_values(ascending=False)
            )
            
            top_authors = author_counts.head(10).reset_index()
            top_authors.columns = ['authors', 'rating_count']
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ Seaborn
            fig_authors, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='rating_count', y='authors', data=top_authors, palette='viridis', ax=ax)
            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫', fontsize=12)
            ax.set_ylabel('–ê–≤—Ç–æ—Ä', fontsize=12)
            ax.set_title('–¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ü–µ–Ω–æ–∫', fontsize=16)
            st.pyplot(fig_authors)
            
            # –û–±–ª–∞–∫–æ —Å–ª–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
            st.subheader("‚òÅÔ∏è –û–±–ª–∞–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤")
            
            author_string = " ".join((author + " ") * count for author, count in author_counts.items())
            
            stop_words = set(STOPWORDS)
            
            wc = WordCloud(
                width=1000,
                height=600,
                max_font_size=120,
                stopwords=stop_words,
                background_color='white'
            ).generate(author_string)
            
            fig_wc, ax_wc = plt.subplots(figsize=(12, 6))
            ax_wc.imshow(wc, interpolation='bilinear')
            ax_wc.axis('off')
            st.pyplot(fig_wc)


if __name__ == "__main__":
    main()
