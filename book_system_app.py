import streamlit as st
import pandas as pd
from difflib import SequenceMatcher
import plotly.express as px
from datetime import datetime

import os

# –ù–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–∏
folder_name = "ProjectCode"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
if not os.path.exists(folder_name):
    os.makedirs(folder_name)

# --- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï ---
st.set_page_config(
    page_title="NextBook ‚Äî —Å–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥",
    page_icon="üìö",
    layout="wide"
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
if "page" not in st.session_state:
    st.session_state.page = "home"

# --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤–æ –≤–∫–ª–∞–¥–∫–∏ ---
st.markdown("""
    <style>
    .sidebar-tab button {
        width: 100%;
        margin-bottom: 5px;
        padding: 0.5rem 1rem;
        border: none;
        background: #f0f0f5;
        color: #333;
        font-weight: 600;
        border-radius: 10px;
        text-align: left;
        transition: 0.2s ease-in-out;
    }
    .sidebar-tab button:hover {
        background: #d6d6f5;
        color: #000;
    }
    .sidebar-tab button.active {
        background: #6C63FF;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–∞–∫ –≤–∫–ª–∞–¥–∫–∏ ---
with st.sidebar:
    st.markdown("### üìò –ú–µ–Ω—é")
    st.markdown('<div class="sidebar-tab">', unsafe_allow_html=True)
    
    if st.button("üè† –ì–ª–∞–≤–Ω–∞—è", key="home_btn"):
        st.session_state.page = "home"
    if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", key="analytics_btn"):
        st.session_state.page = "analytics"
    if st.button("üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", key="rec_btn"):
        st.session_state.page = "recommend"
    
    st.markdown('</div>', unsafe_allow_html=True)

# --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ---
if st.session_state.page == "recommend":
    st.markdown("""
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Open+Sans:wght@400;600&display=swap');

        .main {
            padding: 2rem;
            font-family: 'Open Sans', sans-serif;
        }
        h1, h2, h3, h4, h5 {
            font-family: 'Roboto', sans-serif;
            color: #4A4A4A;
        }

        .stButton>button {
            width: 100%;
            background: linear-gradient(90deg, #6C63FF, #A084DC);
            color: white;
            border: none;
            padding: 0.6rem;
            border-radius: 0.5rem;
            font-weight: bold;
            transition: background 0.3s ease, transform 0.3s ease;
        }
        .stButton>button:hover {
            background: linear-gradient(90deg, #4C47E3, #6F5BB5);
            transform: scale(1.05);
            color: white;
        }
        .recommendation-card {
            padding: 1.5rem;
            border-radius: 1rem;
            background: linear-gradient(135deg, #F0F0F5, #D9D9E4);
            margin: 1rem 0;
            border-left: 5px solid #6C63FF;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            color: #333333;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .recommendation-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
        }
        .metric-card {
            background-color: #ffffff;
            padding: 1rem;
            border-radius: 0.8rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            color: black;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        </style>
    """, unsafe_allow_html=True)


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º ---
if st.session_state.page == "home":
    st.title("üéì –ü—Ä–æ–µ–∫—Ç: NextBook ‚Äî –°–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥")

    # –°–ª–∞–π–¥ 1: –í–≤–µ–¥–µ–Ω–∏–µ
    st.header("üìò –°–ª–∞–π–¥ 1: –ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞")
    st.markdown("""
    **NextBook** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ üìñ
    - –ò–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üë©‚Äçüíº  
    """)
    
    st.divider()
    
    # –°–ª–∞–π–¥ 2: –¶–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
    st.header("üéØ –°–ª–∞–π–¥ 2: –¶–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    st.markdown("""
    - –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ **Streamlit**
    - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π **–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **–∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ—Ö–æ–∂–µ—Å—Ç–∏** –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥
    - –î–æ–±–∞–≤–∏—Ç—å **–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫**: —Ä–µ–π—Ç–∏–Ω–≥, –¥–∞—Ç–∞, —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ—Ü–µ–Ω–∫–∏
    """)
    
    st.divider()
    
    # –°–ª–∞–π–¥ 3: –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    st.header("üõ†Ô∏è –°–ª–∞–π–¥ 3: –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã")
    st.markdown("""
    1. –°–±–æ—Ä –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (`books.csv`)  
    2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞ `BookRecommender`  
    3. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit —Å –≤–∫–ª–∞–¥–∫–∞–º–∏  
    4. –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è (CSS –∏ HTML)  
    5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Plotly  
    6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞  
    """)
    
    st.divider()
    
    # –°–ª–∞–π–¥ 4: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    st.header("üîç –°–ª–∞–π–¥ 4: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞?")
    st.markdown("""
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∫–Ω–∏–≥–∏/–∞–≤—Ç–æ—Ä–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ **–ø–æ—Ö–æ–∂–µ—Å—Ç–∏**  
    - –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è:  
      - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (—Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)  
      - –ò–º—è –∞–≤—Ç–æ—Ä–∞ (—Ä–∞—Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)  
    - –ò—Ç–æ–≥: —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ **—Å—Ö–æ–∂–µ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É**
    """)
    
    st.divider()
    
    # –°–ª–∞–π–¥ 5: –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π?
    st.header("üì¶ –°–ª–∞–π–¥ 5: –ß—Ç–æ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?")
    st.markdown("""
    –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç:
    - –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä üìñ  
    - –†–µ–π—Ç–∏–Ω–≥ (‚≠ê), —Å—Ç—Ä–∞–Ω–∏—Ü—ã (üìÑ), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ (üìä)  
    - –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üìÖ  
    - –í–∏–∑—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π  
    - –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (Plotly)  
    """)
    
    st.divider()
    
    # –°–ª–∞–π–¥ 6: –ß—Ç–æ –¥–∞–ª—å—à–µ?
    st.header("üöÄ –°–ª–∞–π–¥ 6: –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è")
    st.markdown("""
    - –î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥ –∏ –æ–ø–∏—Å–∞–Ω–∏—è  
    - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä–∞–º  
    - –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π  
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Books)  
    """)


elif st.session_state.page == "recommend":

    class BookRecommender:
        def __init__(self, data):
            self.df = pd.DataFrame(data)
            self.df['title'] = self.df['title'].str.strip()
            self.df['authors'] = self.df['authors'].str.strip()
            self.df['clean_title'] = self.df['title'].str.replace(r'\(.*\)', '', regex=True).str.strip()
            self.df['publication_date'] = pd.to_datetime(self.df['publication_date'], errors='coerce')
            self.df = self.df.dropna(subset=['title', 'authors', 'average_rating'])

        def get_title_similarity(self, title1, title2):
            return SequenceMatcher(None, title1.lower(), title2.lower()).ratio()

        def get_author_similarity(self, author1, author2):
            authors1 = set(author1.lower().replace('/', ',').split(','))
            authors2 = set(author2.lower().replace('/', ',').split(','))
            intersection = len(authors1.intersection(authors2))
            union = len(authors1.union(authors2))
            return intersection / union if union > 0 else 0

        def recommend_books(self, query, by='title', n_recommendations=5):
            similarities = []
            for _, row in self.df.iterrows():
                similarity = (
                    self.get_title_similarity(query, row['clean_title'])
                    if by == 'title' else
                    self.get_author_similarity(query, row['authors'])
                )
                if similarity < 1.0:
                    similarities.append(self._create_recommendation_dict(row, similarity))
            return sorted(similarities, key=lambda x: (x['similarity'], x['average_rating']), reverse=True)[:n_recommendations]

        def _create_recommendation_dict(self, row, similarity):
            return {
                'bookID': row['bookID'],
                'title': row['title'],
                'authors': row['authors'],
                'similarity': similarity,
                'average_rating': row['average_rating'],
                'publication_date': row.get('publication_date', 'N/A'),
                'ratings_count': row.get('ratings_count', 0),
                'num_pages': row.get('num_pages', 'N/A')
            }

    @st.cache_data
    def load_data():
        try:
            data = pd.read_csv("books.csv", on_bad_lines='skip')
            data['title'] = data['title'].str.strip()
            data['authors'] = data['authors'].str.strip()
            data['publication_date'] = pd.to_datetime(data['publication_date'], errors='coerce')
            data = data.dropna(subset=['title', 'authors', 'average_rating'])
            return data
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()

    def main():
        st.title("üìö NextBook ‚Äî –Ω–∞–π–¥–∏ —Å–≤–æ—é —Å–ª–µ–¥—É—é—â—É—é –ª—é–±–∏–º—É—é –∫–Ω–∏–≥—É")
        st.markdown("#### –û—Ç–∫—Ä–æ–π –º–∏—Ä –Ω–æ–≤—ã—Ö –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥!")

        data = load_data()
        if data.empty:
            st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª CSV.")
            return

        recommender = BookRecommender(data)

        st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

        search_type = st.sidebar.radio("–ò—Å–∫–∞—Ç—å –ø–æ:", ["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", "–ê–≤—Ç–æ—Ä"])
        if search_type == "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏":
            query = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", options=data['title'].unique())
            by = 'title'
        else:
            query = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:", options=data['authors'].unique())
            by = 'author'

        n_recommendations = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", 1, 10, 5)

        if st.sidebar.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
            recommendations = recommender.recommend_books(query, by, n_recommendations)

            tab1, tab2 = st.tabs(["üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Ü–µ–Ω–æ–∫"])

            with tab1:
                for i, book in enumerate(recommendations, 1):
                    with st.container():
                        st.markdown(f"""
                        <div class="recommendation-card">
                            <h3>{i}. {book['title']}</h3>
                            <p><strong>–ê–≤—Ç–æ—Ä(—ã):</strong> {book['authors']}</p>
                            <p><strong>–ü–æ—Ö–æ–∂–µ—Å—Ç—å:</strong> {book['similarity']:.2f}</p>
                            <p><strong>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</strong> {book['publication_date'].date() if pd.notnull(book['publication_date']) else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                        </div>
                        """, unsafe_allow_html=True)

                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.markdown(f"""
                            <div class="metric-card">
                                <h4>–†–µ–π—Ç–∏–Ω–≥</h4>
                                <h2>‚≠ê {book['average_rating']:.2f}</h2>
                            </div>
                            """, unsafe_allow_html=True)
                        with col2:
                            st.markdown(f"""
                            <div class="metric-card">
                                <h4>–°—Ç—Ä–∞–Ω–∏—Ü</h4>
                                <h2>üìÑ {book['num_pages']}</h2>
                            </div>
                            """, unsafe_allow_html=True)
                        with col3:
                            st.markdown(f"""
                            <div class="metric-card">
                                <h4>–û—Ü–µ–Ω–æ–∫</h4>
                                <h2>üìä {book['ratings_count']:,}</h2>
                            </div>
                            """, unsafe_allow_html=True)

            with tab2:
                fig_ratings = px.bar(
                    pd.DataFrame(recommendations),
                    x='title',
                    y='average_rating',
                    title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∫–Ω–∏–≥',
                    labels={'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', 'average_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                    color='average_rating',
                    color_continuous_scale='purples'
                )
                fig_ratings.update_layout(showlegend=False)
                st.plotly_chart(fig_ratings, use_container_width=True)

    main()

elif st.session_state.page == "analytics":
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.write("–ó–¥–µ—Å—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑.")
